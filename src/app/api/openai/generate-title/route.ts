import OpenAI from 'openai';
import { Message } from 'ai';

// Create an OpenAI API client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
});

export const runtime = 'edge';

export async function POST(req: Request) {
  console.log('Title generation API called');
  
  try {
    const { messages } = await req.json();
    
    console.log(`Processing title generation for ${messages.length} messages`);
    
    // Format the conversation for title generation
    const conversationText = messages
      .filter((msg: Message) => msg.role !== 'system')
      .map((msg: Message) => `${msg.role}: ${msg.content}`)
      .join('\n')
      .slice(0, 1000); // Limit length
    
    console.log('Sending request to OpenAI for title generation');
    
    // Generate a title using OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: 'Generate a short, descriptive title (3-5 words) that captures the main theme of this conversation. Focus on the topic being discussed, not the fact that it\'s a conversation.'
        },
        {
          role: 'user',
          content: conversationText
        }
      ],
      temperature: 0.7,
      max_tokens: 30,
    });
    
    console.log('OpenAI response received:', JSON.stringify(response.choices));
    
    const title = response.choices[0].message.content?.trim() || 'New Conversation';
    console.log('Title generated by OpenAI:', title);
    
    // Add a slight delay to ensure the UI updates properly
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('Returning title to client:', title);
    
    return new Response(JSON.stringify({ title }), {
      headers: {
        'Content-Type': 'application/json',
      },
    });
  } catch (error) {
    console.error('Error generating title:', error);
    
    // Return a more descriptive error message but still provide a fallback title
    return new Response(JSON.stringify({ 
      title: 'New Conversation', 
      error: (error instanceof Error) ? error.message : 'Unknown error' 
    }), {
      status: 200, // Keep 200 status to prevent breaking the UI
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }
} 